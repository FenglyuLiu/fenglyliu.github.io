---
const { title, subtitle, cover, hoverCover = '', hoverScale = 1.1, hoverTop = '40%', showHoverImage = true, href, tags = [], bgClass = '' } = Astro.props
const hasOpacityClass = typeof bgClass === 'string' && bgClass.includes('opacity-')
const hasDarkClass = typeof bgClass === 'string' && bgClass.includes('dark:')
---
<a href={href} class={`group relative block rounded-xl overflow-hidden border border-black/10 dark:border-white/10 hover:shadow-lg hover:shadow-gray-200/50 transform-gpu hover:scale-[1.02] transition-all duration-200 will-change-transform`}>
{bgClass && (
<div class={`absolute inset-0 ${bgClass} ${hasOpacityClass ? '' : 'opacity-40 group-hover:opacity-60'} transition-opacity duration-200 pointer-events-none z-0`}></div>
)}
<div class="relative z-10">
<img src={cover} alt={title} class="aspect-[4/3] w-full object-cover transition-opacity duration-300" loading="lazy" />
{showHoverImage && hoverCover && (
<img src={hoverCover} alt={`${title} hover`} style={{ top: hoverTop, transform: `translate(-50%, -50%) scale(${hoverScale})` }} class="absolute left-1/2 -translate-x-1/2 -translate-y-1/2 w-auto h-auto max-w-full max-h-full object-contain opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" loading="lazy" />
)}
</div>
<div class="p-4 relative z-10">
<h3 class="font-semibold tracking-tight">{title}</h3>
{subtitle && <p class="opacity-70 text-sm mt-1">{subtitle}</p>}
{tags.length > 0 && (
<ul class="flex flex-wrap gap-2 mt-3 text-xs opacity-80">
{tags.map(t => <li class="px-2 py-0.5 rounded-full border border-black/10 dark:border-white/10">{t}</li>)}
</ul>
)}
</div>
</a>